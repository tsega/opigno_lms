<?php

/**
 * @file
 * Install, update and uninstall functions for the Opigno LMS profile.
 */

use Dompdf\Autoloader;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\StreamWrapper\PrivateStream;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_install().
 *
 * Performs actions to set up the site for this profile.
 *
 * @see system_install()
 *
 * @throws \Drupal\Core\Extension\MissingDependencyException
 */
function opigno_lms_install() {
  \Drupal::service('module_installer')->install([
    'dblog',
    'opigno_alter_entity_autocomplete',
  ]);
  $config = \Drupal::configFactory();

  // Disable the user pictures on nodes.
  $config->getEditable('system.theme.global')
    ->set('features.node_user_picture', FALSE)
    ->save(TRUE);

  // Allow visitor account creation, but with administrative approval.
  $config->getEditable('user.settings')
    ->set('register', UserInterface::REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)
    ->save(TRUE);

  // Set default home page.
  $config->getEditable('system.site')
    ->set('page.front', '/node')
    ->save(TRUE);

  // Set theme logo path.
  $theme_path = \Drupal::service('extension.list.theme')->getPath('aristotle');
  $logo_path = $theme_path . "/assets/Logo-Opigno-white.svg";
  $config->getEditable('aristotle.settings')
    ->set('logo.path', $logo_path)
    ->save(TRUE);

  $logo_second = "Logo-Opigno-3-dark.svg";
  $config->getEditable('aristotle.settings')
    ->set('logo_path_anonymous', $logo_second)
    ->save(TRUE);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->addRole('administrator');
  $user->save();

  // Copy user login page background image to public folder.
  $image = file_get_contents(\Drupal::service('extension.list.theme')->getPath('aristotle') . "/assets/Opigno-login-image.jpg");
  \Drupal::service('file_system')->saveData($image, 'public://Opigno-login-image.jpg', FileSystemInterface::EXISTS_REPLACE);

  // Copy user login page background image to public folder.
  $image = file_get_contents(\Drupal::service('extension.list.profile')->getPath('opigno_lms') . "/images/Opigno_Image_connexion_1600-829_2.jpg");
  \Drupal::service('file_system')->saveData($image, 'public://Opigno_Image_connexion_1600-829_2.jpg', TRUE);

  $dompdf_autoloaders = [
    'libraries/dompdf/src/Autoloader.php',
    'profiles/opigno_lms/libraries/dompdf/src/Autoloader.php',
  ];

  foreach ($dompdf_autoloaders as $dompdf_autoloader) {
    if (file_exists($dompdf_autoloader)) {
      // Load dompdf for the entity_print install.
      require_once $dompdf_autoloader;
      Autoloader::register();

      // Install entity_print.
      \Drupal::service('module_installer')->install(['entity_print']);
      break;
    }
  }
}

/**
 * Implements hook_requirements().
 */
function opigno_lms_requirements($phase) {
  $requirements = [];

  // Test if the Private File System Path is set.
  if ($phase == 'runtime') {
    $file_private_path_base_path = PrivateStream::basePath();

    if ($file_private_path_base_path === NULL) {
      $requirements['file_private_system'] = [
        'title' => 'Private Files System',
        'value' => t('Private file system path not set'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('Your uploaded files are not fully protected because you did not set a Private File Directory.
                          You need to set an existing local file system path for storing private files.
                          It should be writable by Drupal and not accessible over the web. This must be changed in settings.php.
                          More info: https://opigno.atlassian.net/wiki/spaces/OUM20/pages/743636993/Enable+private+file+system'
        ),
      ];
    }
    else {
      $requirements['file_private_system'] = [
        'title' => 'Private Files System',
        'value' => t('Private file system path is set'),
        'severity' => REQUIREMENT_OK,
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_update_last_removed().
 */
function opigno_lms_update_last_removed() {
  return 9015;
}

/**
 * Configs update helper function.
 */
function _opigno_lms_apply_update($type, $name, $path, $ymls) {
  $theme_path = sprintf("%s/%s/", \Drupal::service('extension.list.' . $type)->getPath($type, $name), $path);
  $config_factory = \Drupal::configFactory();
  $config_storage = \Drupal::service('config.storage');
  $configs = [];
  foreach ($ymls as $yml) {
    $configs[$yml] = $theme_path;
  }
  foreach ($configs as $config => $config_path) {
    $source = new FileStorage($config_path);
    $data = $source->read($config);
    if (is_array($data)) {
      $config_factory->getEditable($config)->setData($data)->save(TRUE);
      $config_storage->write($config, $data);
    }
    else {
      \Drupal::messenger()->addWarning(t('Incorrect data of @config', ['@config' => $config]));
    }
  }
}

/**
 * Configs remove helper function.
 */
function _opigno_lms_apply_delete($configs) {
  $config_factory = \Drupal::configFactory();
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');
  foreach ($configs as $config) {
    $config_factory->getEditable($config)->delete();
    $config_storage->delete($config);
  }
}

/**
 * Module disable helper function.
 */
function _opigno_lms_update_module_disable($modules) {
  $module_data = \Drupal::config('core.extension')->get('module');
  foreach ($modules as $item) {
    \Drupal::database()->delete('key_value')
      ->condition('collection', 'system.schema')
      ->condition('name', $item)
      ->execute();
    unset($module_data[$item]);
  }
  \Drupal::configFactory()
    ->getEditable('core.extension')
    ->set('module', $module_data)
    ->save();
  \Drupal::service('cache.config')->invalidateAll();
  foreach ($modules as $item) {
    if (\Drupal::moduleHandler()->moduleExists($item)) {
      \Drupal::service('module_installer')->uninstall([$item]);
    }
  }
  drupal_flush_all_caches();
}

/**
 * Update dependencies.
 */
function opigno_lms_update_dependencies() {
  $dependencies['opigno_calendar'][9001] = [
    'opigno_lms' => 9001,
  ];
  $dependencies['opigno_learning_path'][9001] = [
    'opigno_catalog' => 9001,
    'opigno_lms' => 9001,
  ];

  return $dependencies;
}
